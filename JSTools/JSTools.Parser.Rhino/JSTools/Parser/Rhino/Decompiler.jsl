/* -*- Mode: java; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Rhino code, released
 * May 6, 1999.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1997-1999 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 * Roger Lawrence
 * Mike McCabe
 *
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU Public License (the "GPL"), in which case the
 * provisions of the GPL are applicable instead of those above.
 * If you wish to allow use of your version of this file only
 * under the terms of the GPL and not to allow others to use your
 * version of this file under the NPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL.  If you do not delete
 * the provisions above, a recipient may use your version of this
 * file under either the NPL or the GPL.
 */

package JSTools.Parser.Rhino;

import System.Xml.*;

/**
 * This class implements the JavaScript scanner.
 *
 * It is based on the C source files jsscan.c and jsscan.h
 * in the jsref package.
 *
 * @see org.mozilla.javascript.Parser
 *
 * @author Mike McCabe
 * @author Brendan Eich
 */

public class Decompiler 
{
	// how much to indent
	private int _offset = 4;

	// less how much for case labels
	private int _labelSetBack = 2;

	// true to crunch the decompiled source
	private boolean _doCrunch = false;

	private boolean _useTabs = false;
	private boolean _newLineBeforeLB = true;
	private int _defaultIndent = 2;
	
	private static final int TOP_LEVEL_SCRIPT_OR_FUNCTION = 0;
	private static final int CONSTRUCTED_FUNCTION = 1;
	private static final int NESTED_FUNCTION = 2;


	public Decompiler()
	{
	}

	public Decompiler(int offset, int defaultIndent, int labelSetBack, boolean useTabs, boolean newLineBeforeLB)
	{
		_offset = offset;
		_labelSetBack = labelSetBack;
		_newLineBeforeLB = newLineBeforeLB;
		_useTabs = useTabs;
		_defaultIndent = defaultIndent;
	}

	public Decompiler(boolean crunch)
	{
		if (crunch)
		{
			_offset = 0;
			_labelSetBack = 0;
			_doCrunch = crunch;
		}
	}


	/**
	 * Decompile the source information associated with this js
	 * function/script back into a string.  For the most part, this
	 * just means translating tokens back to their string
	 * representations; there's a little bit of lookahead logic to
	 * decide the proper spacing/indentation.  Most of the work in
	 * mapping the original source to the prettyprinted decompiled
	 * version is done by the parser.
	 *
	 * @param encodedSourcesTree See {@link NativeFunction#getSourcesTree()}
	 *        for definition
	 *
	 * @param fromFunctionConstructor true if encodedSourcesTree represents
	 *                                result of Function(...)
	 *
	 * @param version engine version used to compile the source
	 *
	 * @param indent How much to indent the decompiled result
	 *
	 * @param justbody Whether the decompilation should omit the
	 * function header and trailing brace.
	 */
	public String Decompile(
		FunctionTree compiledTree,
		boolean fromFunctionConstructor,
		int version,
		boolean justbody)
	{
		StringBuffer result = new StringBuffer();
		Object[] srcData = new Object[1];

		int type = fromFunctionConstructor ? CONSTRUCTED_FUNCTION
			: TOP_LEVEL_SCRIPT_OR_FUNCTION;
	
		if (compiledTree != null)
		{
			InternalDecompile(
				compiledTree,
				version,
				_defaultIndent,
				type,
				justbody,
				srcData,
				result );
		}
		return result.toString();
	}

	public void ToXmlFile(Node treeToStore, String filePathToStore)
	{
		ToXml(treeToStore).Save(filePathToStore);
	}

	public XmlDocument ToXml(Node treeToStore)
	{
		// create document and document element
		XmlDocument document = new XmlDocument();
		XmlElement docElement = document.CreateElement("NodeTree");
		document.AppendChild(docElement);

		// append child nodes (recursive)
		AppendHirarchy(docElement, treeToStore);

		// store file
		return document;
	}

	private void AppendHirarchy(XmlNode toAppend, Node nodeHirarchy)
	{
		Node currentNode = nodeHirarchy;

		while (currentNode != null)
		{
			// create node element for current hirarchy
			XmlElement nodeElement = toAppend.get_OwnerDocument().CreateElement(currentNode.GetType().get_Name());
			toAppend.AppendChild(nodeElement);

			// append type attribute
			XmlAttribute typeAttribute = toAppend.get_OwnerDocument().CreateAttribute("type");
			typeAttribute.set_Value(TokenStream.tokenToName(currentNode.getType()));
			nodeElement.get_Attributes().Append(typeAttribute);

			// append function prop attribute
			if (currentNode.getProp(Node.FUNCTION_PROP) != null)
			{
				FunctionNode function = (FunctionNode)currentNode.getProp(Node.FUNCTION_PROP);

				XmlAttribute funcAttribute = toAppend.get_OwnerDocument().CreateAttribute("FUNCTION_PROP");
				funcAttribute.set_Value("function [" + function.getFunctionName() + "]");
				nodeElement.get_Attributes().Append(funcAttribute);

				AppendHirarchy(nodeElement, function);
			}

			AppendAttribute(nodeElement, currentNode, "TARGET_PROP", Node.TARGET_PROP);
			AppendAttribute(nodeElement, currentNode, "CONTINUE_PROP", Node.CONTINUE_PROP);
			AppendAttribute(nodeElement, currentNode, "ENUM_PROP", Node.ENUM_PROP);
			AppendAttribute(nodeElement, currentNode, "TEMP_PROP", Node.TEMP_PROP);
			AppendAttribute(nodeElement, currentNode, "LOCAL_PROP", Node.LOCAL_PROP);
			AppendAttribute(nodeElement, currentNode, "CODEOFFSET_PROP", Node.CODEOFFSET_PROP);
			AppendAttribute(nodeElement, currentNode, "FIXUPS_PROP", Node.FIXUPS_PROP);
			AppendAttribute(nodeElement, currentNode, "VARS_PROP", Node.VARS_PROP);
			AppendAttribute(nodeElement, currentNode, "USES_PROP", Node.USES_PROP);
			AppendAttribute(nodeElement, currentNode, "REGEXP_PROP", Node.REGEXP_PROP);
			AppendAttribute(nodeElement, currentNode, "CASES_PROP", Node.CASES_PROP);
			AppendAttribute(nodeElement, currentNode, "DEFAULT_PROP", Node.DEFAULT_PROP);
			AppendAttribute(nodeElement, currentNode, "CASEARRAY_PROP", Node.CASEARRAY_PROP);
			AppendAttribute(nodeElement, currentNode, "SOURCENAME_PROP", Node.SOURCENAME_PROP);
			AppendAttribute(nodeElement, currentNode, "SOURCE_PROP", Node.SOURCE_PROP);
			AppendAttribute(nodeElement, currentNode, "TYPE_PROP", Node.TYPE_PROP);
			AppendAttribute(nodeElement, currentNode, "SPECIAL_PROP_PROP", Node.SPECIAL_PROP_PROP);
			AppendAttribute(nodeElement, currentNode, "LABEL_PROP", Node.LABEL_PROP);
			AppendAttribute(nodeElement, currentNode, "FINALLY_PROP", Node.FINALLY_PROP);
			AppendAttribute(nodeElement, currentNode, "LOCALCOUNT_PROP", Node.LOCALCOUNT_PROP);
			AppendAttribute(nodeElement, currentNode, "FINALLY_PROP", Node.FINALLY_PROP);
			AppendAttribute(nodeElement, currentNode, "TARGETBLOCK_PROP", Node.TARGETBLOCK_PROP);
			AppendAttribute(nodeElement, currentNode, "VARIABLE_PROP", Node.VARIABLE_PROP);
			AppendAttribute(nodeElement, currentNode, "LASTUSE_PROP", Node.LASTUSE_PROP);
			AppendAttribute(nodeElement, currentNode, "ISNUMBER_PROP", Node.ISNUMBER_PROP);
			AppendAttribute(nodeElement, currentNode, "DIRECTCALL_PROP", Node.DIRECTCALL_PROP);
			AppendAttribute(nodeElement, currentNode, "BASE_LINENO_PROP", Node.BASE_LINENO_PROP);
			AppendAttribute(nodeElement, currentNode, "END_LINENO_PROP", Node.END_LINENO_PROP);
			AppendAttribute(nodeElement, currentNode, "SPECIALCALL_PROP", Node.SPECIALCALL_PROP);
			AppendAttribute(nodeElement, currentNode, "DEBUGSOURCE_PROP", Node.DEBUGSOURCE_PROP);

			// recursive call to render child nodes
			AppendHirarchy(nodeElement, currentNode.getFirstChild());
			currentNode = currentNode.getNext();
		}
	}

	private void AppendAttribute(XmlElement toAppend, Node valueContainer, String attributName, int attributeEnum)
	{
		// append source prop attribute
		if (valueContainer.getProp(attributeEnum) != null)
		{
			XmlAttribute attribute = toAppend.get_OwnerDocument().CreateAttribute(attributName);
			attribute.set_Value(valueContainer.getProp(attributeEnum).toString());
			toAppend.get_Attributes().Append(attribute);
		}
	}

	private void InternalDecompile(
		FunctionTree compiledTree,
		int version,
		int indent,
		int type,
		boolean justbody,
		Object[] srcData,
		StringBuffer result)
	{
		// get node source (function nodes and top nodes accommodate this property)
		char[] source = null;
		
		if (compiledTree.Current().getProp(Node.SOURCE_PROP) != null)
			source = (char[])compiledTree.Current().getProp(Node.SOURCE_PROP);

		if (source == null || source.length == 0)
			return;

		// start decompiling
		if (type != NESTED_FUNCTION) 
		{
			// add an initial newline to exactly match js.
			if (!justbody)
				result.append(getNewLineString());
			for (int j = 0; j < indent; j++)
				result.append(getIndentCharacter());
		}

		int length = source.length;
		int charIdx = 0;

		// If the first token is TokenStream.SCRIPT, then we're
		// decompiling the toplevel script, otherwise it a function
		// and should start with TokenStream.FUNCTION

		int token = source[charIdx];
		++charIdx;
		if (token == TokenStream.FUNCTION) 
		{
			if (!justbody) 
			{
				result.append("function");

				if (source[charIdx] != TokenStream.LP)
				{
					result.append(' ');
				}
				else if (version != Context.VERSION_1_2
					&& type == CONSTRUCTED_FUNCTION)
				{
					/* version != 1.2 Function constructor behavior -
					* print 'anonymous' as the function name if the
					* version (under which the function was compiled) is
					* less than 1.2... or if it's greater than 1.2, because
					* we need to be closer to ECMA.  (ToSource, please?)
					*/
					result.append("anonymous");
				}
			} 
			else 
			{
				// Skip past the entire function header pass the next EOL.
			skipLoop: for (;;) 
					  {
						  token = source[charIdx];
						  ++charIdx;
						  switch (token) 
						  {
							  case TokenStream.EOL:
								  break skipLoop;
							  case TokenStream.NAME:
								  // Skip function or argument name
								  charIdx = getSourceString(source, charIdx, null);
								  break;
							  case TokenStream.LP:
							  case TokenStream.COMMA:
							  case TokenStream.RP:
								  break;
							  default:
								  // Bad function header
								  throw new RuntimeException();
						  }
					  }
			}
		}
		else if (token != TokenStream.SCRIPT) 
			throw new RuntimeException("Bad source header");

		while (charIdx < length && source[charIdx] != TokenStream.LAST_TOKEN) 
		{
			switch(source[charIdx]) 
			{
				case TokenStream.NAME:
				case TokenStream.REGEXP:  // re-wrapped in '/'s in parser...
					/* NAMEs are encoded as NAME, (char) length, string...
					 * Note that lookahead for detecting labels depends on
					 * this encoding; change there if this changes.

					 * Also change function-header skipping code above,
					 * used when decompling under decompileFunctionBody.
					 */
					charIdx = getSourceString(source, charIdx + 1, srcData);
					result.append((String)srcData[0]);
					continue;

				case TokenStream.NUMBER: 
					{
					charIdx = getSourceString(source, charIdx + 1, srcData);
					result.append((String)srcData[0]);
					continue;
				}

				case TokenStream.STRING:
				{
					/**
					 * It's just a small script optimization. Remove all
					 * unnecessary string concate - notations.
					 */
					boolean hasConcateNotation = false;

					do
					{
						charIdx = getSourceString(source, charIdx + 1, srcData);
						String stringData = (String)srcData[0];

						if (source[charIdx] == TokenStream.ADD
							&& source[charIdx + 1] == TokenStream.STRING)
						{
							if (!hasConcateNotation) // first conate notation found
								result.append(stringData.substring(0, stringData.length() - 1));
							else // conate notation found
								result.append(stringData.substring(1, stringData.length() - 1));

							hasConcateNotation = true;
							charIdx += 1;
						}
						else
						{
							if (!hasConcateNotation) // no conate notation found
								result.append(stringData);
							else // last conate notation found
								result.append(stringData.substring(1, stringData.length()));

							hasConcateNotation = false;
						}
					}
					while (hasConcateNotation);

					continue;
				}

				case TokenStream.PRIMARY:
					++charIdx;
				switch(source[charIdx]) 
				{
					case TokenStream.TRUE:
						result.append("true");
						break;

					case TokenStream.FALSE:
						result.append("false");
						break;

					case TokenStream.NULL:
						result.append("null");
						break;

					case TokenStream.THIS:
						result.append("this");
						break;

					case TokenStream.TYPEOF:
						result.append("typeof");
						break;

					case TokenStream.VOID:
						result.append("void");
						break;

					case TokenStream.UNDEFINED:
						result.append("undefined");
						break;
				}
					break;

				case TokenStream.FUNCTION: 
				{
					/* functions are stored inside
					 * the node tree, get them out
					 * there
					 */
					++charIdx;
					int functionNumber = source[charIdx];
					
					InternalDecompile(
						compiledTree.GetChildByIndex(functionNumber),
						version,
						indent,
						NESTED_FUNCTION,
						false,
						srcData,
						result );
					break;
				}
				case TokenStream.COMMA:
					result.append(",");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.LC:
				{
					if (_newLineBeforeLB)
					{
						result.append(getNewLineString());
						for (int less = 0; less < indent; less++)
							result.append(getIndentCharacter());
					}
					result.append("{");

					if (nextIs(source, length, charIdx, TokenStream.EOL))
						indent += _offset;

					break;
				}

				case TokenStream.RC:
					/* don't print the closing RC if it closes the
					 * toplevel function and we're called from
					 * decompileFunctionBody.
					 */
					if (justbody && type != NESTED_FUNCTION && charIdx + 1 == length)
						break;

					if (nextIs(source, length, charIdx, TokenStream.EOL))
						indent -= _offset;
					if (nextIs(source, length, charIdx, TokenStream.WHILE)
						|| nextIs(source, length, charIdx, TokenStream.ELSE)) 
					{
						indent -= _offset;
						result.append('}');
						result.append(getWhiteSpaceString());
					}
					else
						result.append('}');
					break;

				case TokenStream.LP:
					result.append('(');
					break;

				case TokenStream.RP:
					result.append(')');
					if (nextIs(source, length, charIdx, TokenStream.LC))
						result.append(getWhiteSpaceString());
					break;

				case TokenStream.LB:
					result.append('[');
					break;

				case TokenStream.RB:
					result.append(']');
					break;

				case TokenStream.EOL:
					result.append(getNewLineString());

					/* add indent if any tokens remain,
					 * less setback if next token is
					 * a label, case or default.
					 */
					if (charIdx + 1 < length) 
					{
						int less = 0;
						int nextToken = source[charIdx + 1];
						if (nextToken == TokenStream.CASE
							|| nextToken == TokenStream.DEFAULT)
							less = _labelSetBack;
						else if (nextToken == TokenStream.RC)
							less = _offset;

							/* elaborate check against label... skip past a
							 * following inlined NAME and look for a COLON.
							 * Depends on how NAME is encoded.
							 */
						else if (nextToken == TokenStream.NAME) 
						{
							int afterName = getSourceString(source, charIdx + 2,
								null);
							if (source[afterName] == TokenStream.COLON)
								less = _offset;
						}

						for (; less < indent; less++)
							result.append(getIndentCharacter());
					}
					break;

				case TokenStream.DOT:
					result.append('.');
					break;

				case TokenStream.NEW:
					result.append("new ");
					break;

				case TokenStream.DELPROP:
					result.append("delete ");
					break;

				case TokenStream.IF:
					result.append("if");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.ELSE:
					result.append("else");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.FOR:
					result.append("for");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.IN:
					result.append(" in ");
					break;

				case TokenStream.WITH:
					result.append("with");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.WHILE:
					result.append("while");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.DO:
					result.append("do");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.TRY:
					result.append("try");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.CATCH:
					result.append("catch");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.FINALLY:
					result.append("finally");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.THROW:
					result.append("throw ");
					break;

				case TokenStream.SWITCH:
					result.append("switch");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.BREAK:
					if (nextIs(source, length, charIdx, TokenStream.NAME))
						result.append("break ");
					else
						result.append("break");
					break;

				case TokenStream.CONTINUE:
					if (nextIs(source, length, charIdx, TokenStream.NAME))
						result.append("continue ");
					else
						result.append("continue");
					break;

				case TokenStream.CASE:
					result.append("case ");
					break;

				case TokenStream.DEFAULT:
					result.append("default");
					break;

				case TokenStream.RETURN:
					if (nextIs(source, length, charIdx, TokenStream.SEMI))
						result.append("return");
					else
						result.append("return ");
					break;

				case TokenStream.VAR:
					result.append("var ");
					break;

				case TokenStream.SEMI:
					// statement termination
					result.append(';');

					if (!nextIs(source, length, charIdx, TokenStream.EOL))
						// separators in FOR
						result.append(getWhiteSpaceString());
					break;

				case TokenStream.ASSIGN:
					++charIdx;
				switch(source[charIdx]) 
				{
					case TokenStream.NOP:
						result.append(getWhiteSpaceString());
						result.append("=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.ADD:
						result.append(getWhiteSpaceString());
						result.append("+=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.SUB:
						result.append(getWhiteSpaceString());
						result.append("-=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.MUL:
						result.append(getWhiteSpaceString());
						result.append("*=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.DIV:
						result.append(getWhiteSpaceString());
						result.append("/=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.MOD:
						result.append(getWhiteSpaceString());
						result.append("%=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.BITOR:
						result.append(getWhiteSpaceString());
						result.append("|=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.BITXOR:
						result.append(getWhiteSpaceString());
						result.append("^=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.BITAND:
						result.append(getWhiteSpaceString());
						result.append("&=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.LSH:
						result.append(getWhiteSpaceString());
						result.append("<<=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.RSH:
						result.append(getWhiteSpaceString());
						result.append(">>=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.URSH:
						result.append(getWhiteSpaceString());
						result.append(">>>=");
						result.append(getWhiteSpaceString());
						break;
				}
					break;

				case TokenStream.HOOK:
					result.append(getWhiteSpaceString());
					result.append("?");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.OBJLIT:
					// pun OBJLIT to mean colon in objlit property initialization.
					// this needs to be distinct from COLON in the general case
					// to distinguish from the colon in a ternary... which needs
					// different spacing.
					result.append(':');
					break;

				case TokenStream.COLON:
					if (nextIs(source, length, charIdx, TokenStream.EOL))
						// it's the end of a label
						result.append(':');
					else
						// it's the middle part of a ternary
						result.append(getWhiteSpaceString());
						result.append(':');
						result.append(getWhiteSpaceString());
					break;

				case TokenStream.OR:
					result.append(getWhiteSpaceString());
					result.append("||");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.AND:
					result.append(getWhiteSpaceString());
					result.append("&&");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.BITOR:
					result.append(getWhiteSpaceString());
					result.append("|");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.BITXOR:
					result.append(getWhiteSpaceString());
					result.append("^");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.BITAND:
					result.append(getWhiteSpaceString());
					result.append("&");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.EQOP:
					++charIdx;
				switch(source[charIdx]) 
				{
					case TokenStream.SHEQ:
						/*
						 * Emulate the C engine; if we're under version
						 * 1.2, then the == operator behaves like the ===
						 * operator (and the source is generated by
						 * decompiling a === opcode), so print the ===
						 * operator as ==.
						 */
						result.append(getWhiteSpaceString());
						result.append(version == Context.VERSION_1_2 ? "==" : "===");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.SHNE:
						result.append(getWhiteSpaceString());
						result.append(version == Context.VERSION_1_2 ? "!=" : "!==");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.EQ:
						result.append(getWhiteSpaceString());
						result.append("==");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.NE:
						result.append(getWhiteSpaceString());
						result.append("!=");
						result.append(getWhiteSpaceString());
						break;
				}
					break;

				case TokenStream.RELOP:
					++charIdx;
				switch(source[charIdx]) 
				{
					case TokenStream.LE:
						result.append(getWhiteSpaceString());
						result.append("<=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.LT:
						result.append(getWhiteSpaceString());
						result.append("<");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.GE:
						result.append(getWhiteSpaceString());
						result.append(">=");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.GT:
						result.append(getWhiteSpaceString());
						result.append(">");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.INSTANCEOF:
						result.append(" instanceof ");
						break;
				}
					break;

				case TokenStream.SHOP:
					++charIdx;
				switch(source[charIdx]) 
				{
					case TokenStream.LSH:
						result.append(getWhiteSpaceString());
						result.append("<<");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.RSH:
						result.append(getWhiteSpaceString());
						result.append(">>");
						result.append(getWhiteSpaceString());
						break;

					case TokenStream.URSH:
						result.append(getWhiteSpaceString());
						result.append(">>>");
						result.append(getWhiteSpaceString());
						break;
				}
					break;

				case TokenStream.UNARYOP:
					++charIdx;
				switch(source[charIdx]) 
				{
					case TokenStream.TYPEOF:
						result.append("typeof ");
						break;

					case TokenStream.VOID:
						result.append("void ");
						break;

					case TokenStream.NOT:
						result.append('!');
						break;

					case TokenStream.BITNOT:
						result.append('~');
						break;

					case TokenStream.ADD:
						result.append('+');
						break;

					case TokenStream.SUB:
						result.append('-');
						break;
				}
					break;

				case TokenStream.INC:
					result.append("++");
					break;

				case TokenStream.DEC:
					result.append("--");
					break;

				case TokenStream.ADD:
					result.append(getWhiteSpaceString());
					result.append("+");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.SUB:
					result.append(getWhiteSpaceString());
					result.append("-");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.MUL:
					result.append(getWhiteSpaceString());
					result.append("*");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.DIV:
					result.append(getWhiteSpaceString());
					result.append("/");
					result.append(getWhiteSpaceString());
					break;

				case TokenStream.MOD:
					result.append(getWhiteSpaceString());
					result.append("%");
					result.append(getWhiteSpaceString());
					break;

				default:
					// If we don't know how to Decompile it, raise an exception.
					throw new RuntimeException();
			}
			++charIdx;
		}

		// add that trailing newline if it's an outermost function.
		if (type != NESTED_FUNCTION && !justbody)
			result.append(getNewLineString());
	}

	private String getNewLineString()
	{
		if (!_doCrunch)
			return "\n";
		else
			return "";
	}

	private String getIndentCharacter()
	{
		if (_useTabs)
			return getTabString();
		else
			return getWhiteSpaceString();
	}

	private String getWhiteSpaceString()
	{
		if (!_doCrunch)
			return " ";
		else
			return "";
	}

	private String getTabString()
	{
		if (!_doCrunch)
			return "\t";
		else
			return "";
	}

	private boolean nextIs(char[] source, int length, int charIdx, int token) 
	{
		return (charIdx + 1 < length) ? source[charIdx + 1] == token : false;
	}

	private int getSourceString(char[] source, int offset,
		Object[] result)
	{
		int length = source[offset];
		++offset;
		if ((0x8000 & length) != 0) 
		{
			length = ((0x7FFF & length) << 16) | source[offset];
			++offset;
		}
		if (result != null) 
		{
			result[0] = new String(source, offset, length);
		}
		return offset + length;
	}
}
