/* -*- Mode: java; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Rhino code, released
 * May 6, 1999.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1997-2000 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 *
 * Patrick Beard
 * Norris Boyd
 * Igor Bukanov
 * Brendan Eich
 * Roger Lawrence
 * Mike McCabe
 * Ian D. Stewart
 * Andi Vajda
 * Andrew Wason
 * Kemal Bayram
 *
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU Public License (the "GPL"), in which case the
 * provisions of the GPL are applicable instead of those above.
 * If you wish to allow use of your version of this file only
 * under the terms of the GPL and not to allow others to use your
 * version of this file under the NPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL.  If you do not delete
 * the provisions above, a recipient may use your version of this
 * file under either the NPL or the GPL.
 */

// API class

package JSTools.Parser.Rhino;

import java.beans.*;
import java.io.*;
import java.util.Enumeration;
import java.util.Vector;
import java.text.MessageFormat;
import java.lang.reflect.*;

import System.DateTime;


/**
 * This class represents the parsing context of a script.
 *
 * Before executing a script, an instance of Context must be created.
 * Contexts are not associated with the current thread.
 *
 * @author Norris Boyd
 * @author Brendan Eich
 */

public class Context 
{
	// default resource name
	private static final String defaultResource = "JSTools.Parser.Rhino.Resources.Messages";

	// default resource manager, does caching
	private static final System.Resources.ResourceManager resources =
		new System.Resources.ResourceManager(
		defaultResource,
		Context.class.ToType().get_Assembly());

	public static final String languageVersionProperty = "language version";
	public static final String errorReporterProperty   = "error reporter";

	static final boolean check = true;

	/**
	 * Create a new Context.
	 *
	 * Note that the Context must be associated with a thread before
	 * it can be used to execute a script.
	 *
	 * @see org.mozilla.javascript.Context#enter
	 */
	public Context() 
	{
		setLanguageVersion(VERSION_DEFAULT);
	}

	/**
	 * Language versions
	 *
	 * All integral values are reserved for future version numbers.
	 */

	/**
	 * The unknown version.
	 */
	public static final int VERSION_UNKNOWN =   -1;

	/**
	 * The default version.
	 */
	public static final int VERSION_DEFAULT =    0;

	/**
	 * JavaScript 1.0
	 */
	public static final int VERSION_1_0 =      100;

	/**
	 * JavaScript 1.1
	 */
	public static final int VERSION_1_1 =      110;

	/**
	 * JavaScript 1.2
	 */
	public static final int VERSION_1_2 =      120;

	/**
	 * JavaScript 1.3
	 */
	public static final int VERSION_1_3 =      130;

	/**
	 * JavaScript 1.4
	 */
	public static final int VERSION_1_4 =      140;

	/**
	 * JavaScript 1.5
	 */
	public static final int VERSION_1_5 =      150;


	/**
	 * Clears the warnings array.
	 */
	public void clearWarnings()
	{
		warnings.removeAllElements();
	}


	/**
	 * Get the current language version.
	 * <p>
	 * The language version number affects JavaScript semantics as detailed
	 * in the overview documentation.
	 *
	 * @return an integer that is one of VERSION_1_0, VERSION_1_1, etc.
	 */
	public int getLanguageVersion() 
	{
		return version;
	}

	/**
	 * Set the language version.
	 *
	 * <p>
	 * Setting the language version will affect functions and scripts compiled
	 * subsequently. See the overview documentation for version-specific
	 * behavior.
	 *
	 * @param version the version as specified by VERSION_1_0, VERSION_1_1, etc.
	 */
	public void setLanguageVersion(int version) 
	{
		this.version = version;
	}

	/**
	 * Get the implementation version.
	 *
	 * <p>
	 * The implementation version is of the form
	 * <pre>
	 *    "<i>name langVer</i> <code>release</code> <i>relNum date</i>"
	 * </pre>
	 * where <i>name</i> is the name of the product, <i>langVer</i> is
	 * the language version, <i>relNum</i> is the release number, and
	 * <i>date</i> is the release date for that specific
	 * release in the form "yyyy mm dd".
	 *
	 * @return a string that encodes the product, language version, release
	 *         number, and date.
	 */
	public String getImplementationVersion() 
	{
		return "Rhino 1.5 release 4.1 2003 04 21 (PARSER ONLY)";
	}

	/**
	 * Get the current locale.  Returns the default locale if none has
	 * been set.
	 *
	 * @see java.util.Locale
	 */

	public System.Globalization.CultureInfo getLocale() 
	{
		if (locale == null)
			locale = System.Globalization.CultureInfo.get_CurrentCulture();
		return locale;
	}

	/**
	 * Set the current locale.
	 *
	 * @see java.util.Locale
	 */
	public System.Globalization.CultureInfo setLocale(System.Globalization.CultureInfo loc) 
	{
		System.Globalization.CultureInfo result = locale;
		locale = loc;
		return result;
	}

	// Rudimentary support for Design-by-Contract
	static void codeBug() 
	{
		throw new RuntimeException("FAILED ASSERTION");
	}

	/**
	 * Report a warning using the error reporter for the current thread.
	 *
	 * @param message the warning message to report
	 * @param sourceName a string describing the source, such as a filename
	 * @param lineno the starting line number
	 * @param lineSource the text of the line (may be null)
	 * @param lineOffset the offset into lineSource where problem was detected
	 * @see org.mozilla.javascript.ErrorReporter
	 */
	public void reportWarning(String message, String sourceName,
		int lineno, String lineSource,
		int lineOffset)
	{
		warnings.addElement(new EvaluatorWarning(message, sourceName, lineno, lineOffset, lineSource));
	}


	/**
	 * Report an error using the error reporter for the current thread.
	 *
	 * @param message the error message to report
	 * @param sourceName a string describing the source, such as a filename
	 * @param lineno the starting line number
	 * @param lineSource the text of the line (may be null)
	 * @param lineOffset the offset into lineSource where problem was detected
	 * @see org.mozilla.javascript.ErrorReporter
	 */
	public void reportError(String message, String sourceName,
		int lineno, String lineSource,
		int lineOffset)
	{
		errorCount++;
		throw new EvaluatorException(message, sourceName, lineno, lineOffset, lineSource);
	}

	/**
	 * Parses the given string.
	 */
	public void parseString(String toParse, String sourceName)
		throws IOException
	{
		TokenStream ts = new TokenStream(this, new StringReader(toParse), sourceName, 0);
		IRFactory irf = new IRFactory(this, ts);

		Parser parser = new Parser(this, irf);
		parser.parse(ts);
	}

	/**
	 * Parses the given string.
	 */
	public void parseFile(String fileLocation)
		throws IOException
	{
		FileInputStream stream = new FileInputStream(fileLocation);
		TokenStream ts = new TokenStream(this, new InputStreamReader(stream), fileLocation, 0);
		IRFactory irf = new IRFactory(this, ts);

		Parser parser = new Parser(this, irf);
		parser.parse(ts);
	}

	/**
	 * Returns true, if the given string contains a valid javascript.
	 */
	public boolean isValidScript(String toParse)
		throws IOException
	{
		try
		{
			parseString(toParse, null);
			return true;
		}
		catch (Exception e)
		{
			return false;
		}
	}

	/**
	 * if hasFeature(FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME) returns true,
	 * allow 'function <MemberExpression>(...) { ... }' to be syntax sugar for
	 * '<MemberExpression> = function(...) { ... }', when <MemberExpression>
	 * is not simply identifier.
	 * See Ecma-262, section 11.2 for definition of <MemberExpression>
	 */
	public static final int FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME = 2;

	/**
	 * if hasFeature(RESERVED_KEYWORD_AS_IDENTIFIER) returns true,
	 * treat future reserved keyword (see  Ecma-262, section 7.5.3) as ordinary
	 * identifiers but warn about this usage
	 */
	public static final int FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER = 3;

	/**
	 * Controls certain aspects of script semantics.
	 * Should be overwritten to alter default behavior.
	 * @param featureIndex feature index to check
	 * @return true if the <code>featureIndex</code> feature is turned on
	 * @see #FEATURE_NON_ECMA_GET_YEAR
	 * @see #FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME
	 * @see #FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER
	 */
	public boolean hasFeature(int featureIndex) 
	{
		switch (featureIndex) 
		{
			case FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME:
				return false;

			case FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER:
				return false;
		}
		// It is a bug to call the method with unknown featureIndex
		throw new IllegalArgumentException();
	}

	public String getMessage(String messageId, Object[] arguments) 
	{
		String formatString;

		try
		{
			formatString = resources.GetString(messageId, getLocale());
		}
		catch (Exception e)
		{
			throw new RuntimeException ("no message resource found for message property \"" +
				messageId + "\" Error description: " + e.getMessage());
		}

		/*
		 * It's OK to format the string, even if 'arguments' is null;
		 * we need to format it anyway, to make double ''s collapse to
		 * single 's.
		 */
		// TODO: MessageFormat is not available on pJava
		MessageFormat formatter = new MessageFormat(formatString);
		return formatter.format(arguments);
	}

	/**
	 * Returns a vector, which contains warning [JavaScriptException] instances.
	 */
	public EvaluatorWarning[] getWarnings()
	{
		EvaluatorWarning[] warningList = new EvaluatorWarning[warnings.size()];
		warnings.copyInto(warningList);
		return warningList;
	}

	// debug flags, default true
	static final boolean printTrees = true;

	private Vector warnings = new Vector();
	private int version;
	private int errorCount;

	private System.Globalization.CultureInfo locale;
}
