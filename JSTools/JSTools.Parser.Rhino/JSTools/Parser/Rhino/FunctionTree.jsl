/* -*- Mode: java; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Rhino code, released
 * May 6, 1999.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1997-1999 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 * Roger Lawrence
 * Mike McCabe
 *
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU Public License (the "GPL"), in which case the
 * provisions of the GPL are applicable instead of those above.
 * If you wish to allow use of your version of this file only
 * under the terms of the GPL and not to allow others to use your
 * version of this file under the NPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL.  If you do not delete
 * the provisions above, a recipient may use your version of this
 * file under either the NPL or the GPL.
 */

package JSTools.Parser.Rhino;

import System.*;
import System.Collections.*;

public class FunctionTree
{
	private ArrayList _childTrees = new ArrayList();
	private Node _currentNode = null;

	public FunctionTree(Node nodeTree)
	{
		_currentNode = nodeTree;
		InitFunctionNodes(nodeTree);
	}

	public Node Current()
	{
		return _currentNode;
	}

	public FunctionTree GetChildByIndex(int index)
	{
		if (index < 0 || index >= _childTrees.get_Count())
		{
			throw new ArgumentException(
				String.Format("The given function node index {0} is invalid.", new Integer(index).toString()) );
		}
		return (FunctionTree)_childTrees.get_Item(index);
	}

	private void InitFunctionNodes(Node parentNode)
	{
		Node currentNode = parentNode.getFirstChild();

		while (currentNode != null)
		{
			// search for function property
			if (currentNode.getProp(Node.FUNCTION_PROP) != null)
				_childTrees.Add(new FunctionTree((Node)currentNode.getProp(Node.FUNCTION_PROP)));

			// search in the current tree for a node with a function property
			InitFunctionNodes(currentNode);

			// walk through the hirarchy
			currentNode = currentNode.next;
		}
	}
}
